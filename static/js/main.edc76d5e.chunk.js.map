{"version":3,"sources":["logo.svg","components/input/Input.js","components/tempature/Tempature.js","components/weather-description/WeatherDescription.js","components/display/Display.js","components/weather/Weather.js","App.js","reportWebVitals.js","index.js"],"names":["Input","props","console","log","type","name","id","placeholder","onChange","e","Tempature","tempature","temp","Number","toFixed","fromKelvinToFahrenheit","WeatherDescription","weather","map","info","description","main","icon","src","alt","Display","submited","className","data","sys","country","Weather","useState","setWeather","userInput","setUserInput","city","setCity","isSubmitted","setIsSubmitted","API_KEY","process","useEffect","a","fetch","response","json","cod","fetchMyAPI","target","value","onClick","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"yQAAe,I,kDCiBAA,EAfD,SAACC,GACX,OACI,gCACKC,QAAQC,IAAIF,GACb,uBACIG,KAAK,OACLC,KAAK,WACLC,GAAG,YACHC,YAAY,iDACZC,SAAU,SAAAC,GAAC,OAAIR,EAAMO,SAASC,UCD/BC,EAVG,SAACT,GAOf,OAAO,4CANP,SAAgCA,GAC5B,IAAIU,EAAYV,EAAMW,KAEtB,OAAOC,QAD0C,GAAtBF,EAAY,QAAY,EAAI,IACnBG,QAAQ,IAG1BC,CAAuBd,GAAtC,QCiBIe,EAxBY,SAACf,GASxB,OACI,8BACKA,EAAMgB,QAAQC,KAAI,SAAAC,GACf,OACI,gCACI,4BAAIA,EAAKC,cACT,4BAAID,EAAKE,QAdRC,EAeYH,EAAKG,KAb9B,8BACI,qBAAKC,IAAK,oCAAsCD,EAAO,OAAQE,IAAI,uBAH/E,IAAqBF,QCuBVG,G,MApBC,SAACxB,GAEb,OAAIA,EAAMyB,SAQF,sBAAKC,UAAU,sBAAf,UACI,oBAAIA,UAAU,WAAd,SAA0B1B,EAAM2B,KAAKvB,OACrC,0CAAaJ,EAAM2B,KAAKC,IAAIC,WAC5B,cAAC,EAAD,CAAWlB,KAAMX,EAAM2B,KAAKP,KAAKT,OACjC,cAAC,EAAD,CAAoBK,QAAShB,EAAM2B,KAAKX,aAV5C,8BACI,wD,MCoCDc,MAxCf,WAAoB,IAAD,EACeC,mBAAS,IADxB,mBACRf,EADQ,KACCgB,EADD,OAEmBD,mBAAS,IAF5B,mBAERE,EAFQ,KAEGC,EAFH,OAGSH,mBAAS,IAHlB,mBAGRI,EAHQ,KAGFC,EAHE,OAIuBL,oBAAS,GAJhC,mBAIRM,EAJQ,KAIKC,EAJL,KAMTC,EAAUC,mCAuBhB,OAtBAC,qBAAU,WAAM,4CACZ,4BAAAC,EAAA,sEACyBC,MAAM,qDAAD,OAAsDR,EAAtD,kBAAoEI,IADlG,cACQK,EADR,gBAEqBA,EAASC,OAF9B,OAEID,EAFJ,OAGIZ,EAAWY,GAES,MAAjBA,EAASE,KACRR,GAAe,GANvB,4CADY,uBAAC,WAAD,wBAWZS,KACD,CAACZ,IAWA,sBAAKT,UAAU,oBAAf,UACI,6CACCzB,QAAQC,IAAI,UAAWc,GACxB,cAAC,EAAD,CAAOT,SAZf,SAAsBC,GAClB0B,EAAa1B,EAAEwC,OAAOC,UAYlB,wBAAQA,MAAM,OAAOvB,UAAU,cAAcwB,QATrD,WACId,EAAQH,IAQJ,kBACA,cAAC,EAAD,CAASN,KAAMX,EAASS,SAAUY,QC9B/Bc,MANf,WACE,OACE,cAAC,EAAD,KCMWC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.edc76d5e.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import './Input.css';\r\n\r\nconst Input = (props) => {\r\n    return (\r\n        <div>\r\n            {console.log(props)}\r\n            <input \r\n                type=\"text\"\r\n                name=\"username\"\r\n                id=\"cityInput\"\r\n                placeholder=\"Enter city name for to know current weather...\"\r\n                onChange={e => props.onChange(e)}\r\n            />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Input;","const Tempature = (props) => {\r\n    function fromKelvinToFahrenheit(props) {\r\n        let tempature = props.temp;\r\n        let tempatureFahrenheit = (tempature - 273.15) * 9/5 + 32\r\n        return Number((tempatureFahrenheit).toFixed(1));\r\n    }\r\n\r\n    return <p>Tempature: {fromKelvinToFahrenheit(props)}F</p>\r\n}\r\n\r\nexport default Tempature;","const WeatherDescription = (props) => {\r\n    function displayIcon(icon) {\r\n        return (\r\n            <div>\r\n                <img src={\"http://openweathermap.org/img/wn/\" + icon + \".png\"} alt=\"Weather Icon\"/>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    return(\r\n        <div>\r\n            {props.weather.map(info => {\r\n                return(\r\n                    <div>\r\n                        <p>{info.description}</p>\r\n                        <p>{info.main}</p>\r\n                        {displayIcon(info.icon)}\r\n                    </div>\r\n                );\r\n            })}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default WeatherDescription;","import Tempature from \"../tempature/Tempature\";\r\nimport WeatherDescription from \"../weather-description/WeatherDescription\";\r\nimport './Display.css';\r\n\r\nconst Display = (props) => {\r\n\r\n    if(!props.submited) {\r\n        return (\r\n            <div>\r\n                <p>Wait Data from user</p>\r\n            </div>\r\n        )\r\n    } else {\r\n        return (\r\n            <div className=\"weather-description\">\r\n                <h2 className=\"cityName\">{props.data.name}</h2>\r\n                <p>Country: {props.data.sys.country}</p>\r\n                <Tempature temp={props.data.main.temp} />\r\n                <WeatherDescription weather={props.data.weather} />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Display;","import { useEffect, useState } from 'react';\r\nimport Input from '../input/Input';\r\nimport Display from '../display/Display';\r\nimport './Weather.css';\r\n\r\nfunction Weather() { \r\n    const [weather, setWeather] = useState([]);\r\n    const [userInput, setUserInput] = useState(\"\");\r\n    const [city, setCity] = useState(\"\");\r\n    const [isSubmitted, setIsSubmitted] = useState(false);\r\n\r\n    const API_KEY = process.env.REACT_APP_WEATHER_API_KEY;\r\n    useEffect(() => {\r\n        async function fetchMyAPI() { \r\n            let response = await fetch(`https://api.openweathermap.org/data/2.5/weather?q=${city}&appid=${API_KEY}`)\r\n            response = await response.json()\r\n            setWeather(response)\r\n\r\n            if(response.cod === 200) {\r\n                setIsSubmitted(true);\r\n            }\r\n        }\r\n\r\n        fetchMyAPI();\r\n    }, [city]);\r\n\r\n    function handleChange(e) {\r\n        setUserInput(e.target.value);\r\n    }\r\n\r\n    function submitUserData() {\r\n        setCity(userInput);\r\n    }\r\n    \r\n    return (\r\n        <div className=\"weather-container\">\r\n            <h1>Weather App</h1>\r\n            {console.log(\"Weather\", weather)}\r\n            <Input onChange={handleChange}/>\r\n            <button value=\"Send\" className=\"btn success\" onClick={submitUserData}>Send</button>\r\n            <Display data={weather} submited={isSubmitted}/>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Weather;","import logo from './logo.svg';\nimport './App.css';\nimport Weather from './components/weather/Weather';\n\nfunction App() {\n  return (\n    <Weather />\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}